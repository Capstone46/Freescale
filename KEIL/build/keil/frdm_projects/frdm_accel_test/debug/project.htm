<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\debug\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\debug\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Tue Nov 18 06:26:43 2014
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__startup &rArr; start &rArr; main &rArr; MMA845x_I2C0_Standby &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">__startup</a> from crt0.o(.text) referenced from vectors.o(.intvec)
 <LI><a href="#[2]">default_isr</a> from vectors.o(.text) referenced 44 times from vectors.o(.intvec)
 <LI><a href="#[5]">pit_callback</a> from frdm_accel_test.o(.text) referenced from frdm_accel_test.o(.text)
 <LI><a href="#[3]">pit_isr</a> from pit.o(.text) referenced from vectors.o(.intvec)
 <LI><a href="#[6]">portc_callback</a> from frdm_accel_test.o(.text) referenced from frdm_accel_test.o(.text)
 <LI><a href="#[4]">portcd_isr</a> from gpio.o(.text) referenced from vectors.o(.intvec)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>common_startup</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = common_startup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vtor
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[73]"></a>stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>write_vtor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arm_cm0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_startup
</UL>

<P><STRONG><a name="[75]"></a>SYSTICK_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>systick_isr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = start &rArr; main &rArr; MMA845x_I2C0_Standby &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__startup
</UL>

<P><STRONG><a name="[2]"></a>default_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.intvec)
</UL>
<P><STRONG><a name="[7]"></a>__startup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, crt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = __startup &rArr; start &rArr; main &rArr; MMA845x_I2C0_Standby &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[77]"></a>PORTA_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>PORTB_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORTB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>PORTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>PORTD_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORTD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>PORTE_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORTE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>GPIOA_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GPIOB_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>GPIOC_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>GPIOD_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>GPIOE_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>porta_isr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>portcd_isr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = portcd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.intvec)
</UL>
<P><STRONG><a name="[24]"></a>I2C0_Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>I2C1_Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>I2C0_CycleWrite</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C0_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadMultiBytes
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteMultiBytes
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[d]"></a>I2C0_WriteByte</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_WriteByte &rArr; I2C0_CycleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeTransEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FIFOBypassed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FIFOEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OverSampling
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoSleepDisable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoSleepEnable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_SelfTestDisable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_SelfTestEnable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FastReadDisable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FastReadEnable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_LowNoiseDisable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_LowNoiseEnable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_DataRate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoWake
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_DynamicRange
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_DeInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Standby
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_ReadRawData
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OpenDrainEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptOnINT1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptEnable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptDisable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_IntPolarityLow
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Active
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OutputDataFilterType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_HPF_CutOff
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptOnINT2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_PushPullEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_IntPolarityHigh
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeFreefallMotionDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeFreefallMotionEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakePulseDisable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakePulseEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeOrientationDisable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeOrientationEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeTransDisable
</UL>

<P><STRONG><a name="[10]"></a>I2C1_CycleWrite</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadMultiBytes
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteMultiBytes
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[f]"></a>I2C1_WriteByte</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeTransEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FIFOBypassed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FIFOEnable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OverSampling
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoSleepDisable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoSleepEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_SelfTestDisable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_SelfTestEnable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FastReadDisable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FastReadEnable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_LowNoiseDisable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_LowNoiseEnable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_DataRate
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoWake
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_DynamicRange
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Standby
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Active
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_DeInit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_ReadRawData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OutputDataFilterType
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_HPF_CutOff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptOnINT2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptOnINT1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptDisable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptEnable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_PushPullEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OpenDrainEnable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_IntPolarityLow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_IntPolarityHigh
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeFreefallMotionDisable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeFreefallMotionEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakePulseDisable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakePulseEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeOrientationDisable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeOrientationEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeTransDisable
</UL>

<P><STRONG><a name="[12]"></a>I2C0_CycleRead</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C0_CycleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadMultiBytes
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
</UL>

<P><STRONG><a name="[11]"></a>I2C0_ReadByte</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleRead
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeTransEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FIFOBypassed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FIFOEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OverSampling
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoSleepDisable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoSleepEnable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_SelfTestDisable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_SelfTestEnable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FastReadDisable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_FastReadEnable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_LowNoiseDisable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_LowNoiseEnable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_DataRate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_AutoWake
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_DynamicRange
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Standby
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_ReadRawData
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OpenDrainEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptOnINT1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptEnable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptDisable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_IntPolarityLow
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Active
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OutputDataFilterType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_HPF_CutOff
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptOnINT2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_PushPullEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_IntPolarityHigh
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeFreefallMotionDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeFreefallMotionEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakePulseDisable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakePulseEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeOrientationDisable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeOrientationEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_WakeTransDisable
</UL>

<P><STRONG><a name="[14]"></a>I2C1_CycleRead</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadMultiBytes
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
</UL>

<P><STRONG><a name="[13]"></a>I2C1_ReadByte</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleRead
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeTransEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FIFOBypassed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FIFOEnable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OverSampling
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoSleepDisable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoSleepEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_SelfTestDisable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_SelfTestEnable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FastReadDisable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_FastReadEnable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_LowNoiseDisable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_LowNoiseEnable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_DataRate
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_AutoWake
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_DynamicRange
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Standby
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Active
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_ReadRawData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OutputDataFilterType
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_HPF_CutOff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptOnINT2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptOnINT1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptDisable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_InterruptEnable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_PushPullEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_OpenDrainEnable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_IntPolarityLow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_IntPolarityHigh
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeFreefallMotionDisable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeFreefallMotionEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakePulseDisable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakePulseEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeOrientationDisable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeOrientationEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_WakeTransDisable
</UL>

<P><STRONG><a name="[15]"></a>I2C0_WriteMultiBytes</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleWrite
</UL>

<P><STRONG><a name="[16]"></a>I2C1_WriteMultiBytes</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleWrite
</UL>

<P><STRONG><a name="[17]"></a>I2C0_ReadMultiBytes</STRONG> (Thumb, 148 bytes, Stack size 44 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C0_ReadMultiBytes &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleRead
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_ReadRawData
</UL>

<P><STRONG><a name="[18]"></a>I2C1_ReadMultiBytes</STRONG> (Thumb, 148 bytes, Stack size 44 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleRead
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_CycleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C1_ReadRawData
</UL>

<P><STRONG><a name="[7e]"></a>I2C0_isr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>I2C1_isr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>PIT0_CH0_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT0_CH0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>PIT0_CH1_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>pit_isr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pit_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.intvec)
</UL>
<P><STRONG><a name="[1a]"></a>SIM_Init</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>MCG_LITE_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, mcg_lite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCG_LITE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>LCD_InstallCallbackLCD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>LCD_Init</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>LCD_GOTO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>LCD_Write_Char</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>LCD_Delete_Char</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_Delete_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>LCD_Write_Segments</STRONG> (Thumb, 74 bytes, Stack size 36 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>LCD_isr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>pit_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, frdm_accel_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pit_callback &rArr; MMA845x_I2C0_ReadRawData &rArr; I2C0_ReadMultiBytes &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_ReadRawData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frdm_accel_test.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>main</STRONG> (Thumb, 360 bytes, Stack size 160 bytes, frdm_accel_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = main &rArr; MMA845x_I2C0_Standby &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCG_LITE_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_CH0_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Standby
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_OpenDrainEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptOnINT1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptEnable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_InterruptDisable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_IntPolarityLow
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_Active
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delete_Char
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[25]"></a>MMA845x_I2C0_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_Init &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>MMA845x_I2C1_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[2f]"></a>MMA845x_I2C0_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[30]"></a>MMA845x_I2C1_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[2c]"></a>MMA845x_I2C0_Active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_Active &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>MMA845x_I2C0_Standby</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_Standby &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>MMA845x_I2C0_DynamicRange</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[32]"></a>MMA845x_I2C1_Active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[33]"></a>MMA845x_I2C1_Standby</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[34]"></a>MMA845x_I2C1_DynamicRange</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[35]"></a>MMA845x_I2C0_AutoWake</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[36]"></a>MMA845x_I2C1_AutoWake</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[37]"></a>MMA845x_I2C0_DataRate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[38]"></a>MMA845x_I2C1_DataRate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[39]"></a>MMA845x_I2C0_LowNoiseEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[3a]"></a>MMA845x_I2C1_LowNoiseEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[3b]"></a>MMA845x_I2C0_LowNoiseDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[3c]"></a>MMA845x_I2C1_LowNoiseDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[3d]"></a>MMA845x_I2C0_FastReadEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[3e]"></a>MMA845x_I2C1_FastReadEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[3f]"></a>MMA845x_I2C0_FastReadDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[40]"></a>MMA845x_I2C1_FastReadDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[41]"></a>MMA845x_I2C0_SelfTestEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[42]"></a>MMA845x_I2C1_SelfTestEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[43]"></a>MMA845x_I2C0_SelfTestDisable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[44]"></a>MMA845x_I2C1_SelfTestDisable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[45]"></a>MMA845x_I2C0_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[46]"></a>MMA845x_I2C1_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[47]"></a>MMA845x_I2C0_AutoSleepEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[48]"></a>MMA845x_I2C1_AutoSleepEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[49]"></a>MMA845x_I2C0_AutoSleepDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[4a]"></a>MMA845x_I2C1_AutoSleepDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[4b]"></a>MMA845x_I2C0_OverSampling</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[4c]"></a>MMA845x_I2C1_OverSampling</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[4d]"></a>MMA845x_I2C0_FIFOEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[4e]"></a>MMA845x_I2C1_FIFOEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[4f]"></a>MMA845x_I2C0_FIFOBypassed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[50]"></a>MMA845x_I2C1_FIFOBypassed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[51]"></a>MMA845x_I2C0_WakeTransEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[52]"></a>MMA845x_I2C1_WakeTransEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[53]"></a>MMA845x_I2C0_WakeTransDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[54]"></a>MMA845x_I2C1_WakeTransDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[55]"></a>MMA845x_I2C0_WakeOrientationEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[56]"></a>MMA845x_I2C1_WakeOrientationEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[57]"></a>MMA845x_I2C0_WakeOrientationDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[58]"></a>MMA845x_I2C1_WakeOrientationDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[59]"></a>MMA845x_I2C0_WakePulseEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[5a]"></a>MMA845x_I2C1_WakePulseEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[5b]"></a>MMA845x_I2C0_WakePulseDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[5c]"></a>MMA845x_I2C1_WakePulseDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[5d]"></a>MMA845x_I2C0_WakeFreefallMotionEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[5e]"></a>MMA845x_I2C1_WakeFreefallMotionEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[5f]"></a>MMA845x_I2C0_WakeFreefallMotionDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[60]"></a>MMA845x_I2C1_WakeFreefallMotionDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[61]"></a>MMA845x_I2C0_IntPolarityHigh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[62]"></a>MMA845x_I2C1_IntPolarityHigh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[27]"></a>MMA845x_I2C0_IntPolarityLow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_IntPolarityLow &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>MMA845x_I2C1_IntPolarityLow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[28]"></a>MMA845x_I2C0_OpenDrainEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_OpenDrainEnable &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>MMA845x_I2C1_OpenDrainEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[65]"></a>MMA845x_I2C0_PushPullEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[66]"></a>MMA845x_I2C1_PushPullEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[2a]"></a>MMA845x_I2C0_InterruptEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_InterruptEnable &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>MMA845x_I2C1_InterruptEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[29]"></a>MMA845x_I2C0_InterruptDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_InterruptDisable &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>MMA845x_I2C1_InterruptDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[2b]"></a>MMA845x_I2C0_InterruptOnINT1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA845x_I2C0_InterruptOnINT1 &rArr; I2C0_ReadByte &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>MMA845x_I2C1_InterruptOnINT1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[6a]"></a>MMA845x_I2C0_InterruptOnINT2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[6b]"></a>MMA845x_I2C1_InterruptOnINT2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[6c]"></a>MMA845x_I2C0_HPF_CutOff</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[6d]"></a>MMA845x_I2C1_HPF_CutOff</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[6e]"></a>MMA845x_I2C0_OutputDataFilterType</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
</UL>

<P><STRONG><a name="[6f]"></a>MMA845x_I2C1_OutputDataFilterType</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[19]"></a>MMA845x_I2C0_ReadRawData</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MMA845x_I2C0_ReadRawData &rArr; I2C0_ReadMultiBytes &rArr; I2C0_CycleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadMultiBytes
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_callback
</UL>

<P><STRONG><a name="[71]"></a>MMA845x_I2C1_ReadRawData</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, mma845x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadMultiBytes
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteByte
</UL>

<P><STRONG><a name="[9]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_startup
</UL>

<P><STRONG><a name="[86]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_I2C0_ReadRawData
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6]"></a>portc_callback</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, frdm_accel_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = portc_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frdm_accel_test.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
